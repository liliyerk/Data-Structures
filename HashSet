class Node:
    def __init__(self, data):
        self.data = data
        self.next = None

class HashSet:
    def __init__(self, capacity):
        self.capacity = capacity
        self.hashtable = [None] * self.capacity
        self.size = 0

    def hash(self, element):
        return ord(element[0]) % self.capacity

    def add(self,element):
        index = self.hash(element)
        if self.contains(element) == True:
            print("The element is already in the set")
        elif self.hashtable[index] == None:
            self.hashtable[index] = Node(element)
            self.size += 1
        else:
            curr = self.hashtable[index]
            self.hashtable[index] = Node(element)
            self.hashtable[index].next = curr
            self.size += 1

    def contains(self, element):
        index = self.hash(element)
        n = self.hashtable[index]
        while n != None:
            if n.data == element:
                return True
            else:
                n = n.next
        return False

    def remo(self, element):
        index = self.hash(element)
        c = self.hashtable[index]
        p = None
        while c!=None:
            if c.data == element:
                if p == None:
                    self.hashtable[index] = c.next
                else:
                    p.next = c.next
                c.next = None
                self.size -= 1
                return c
            else:
                p = c
                c = c.next
        return None

    def __iter__(self):
        for e in self.hashtable:
            if e != None:
                self._elem = e
                break
        return self

    def __next__(self):
        if self._elem == None:
            raise StopIteration
        else:
            if self._elem.next != None:
                self._elem = self._elem.next
            else:
                index = self.hash(self._elem)
            self._elem = None
            for i in range(index+1, len(self.hashtable)):
                if self.hashtable[i] != None:
                    self._elem = self.hashtable[i]
                    break
            return None

    def levelOrderedIter(self):
        for i in range(self.size):
            isYield = False
            for e in self.hashtable:
                for j in range(i):
                    if e != None:
                        e = e.next
                if e !=None:
                    yield e.data
                    isYield = True
            if isYield == False:
                break

    def levelOrderedIterQueue(self):
        q = []
        for e in self.hashtable:
            if e != None:
                q.append(e)
        while len(q)>0:
            print(q[0].data)
            if q[0].next != None:
                q.append(q[0].next)
            q.pop(0)

    def print(self):
        for e in self.hashtable:
            while e != None:
                print(e.data)
                e = e.next
